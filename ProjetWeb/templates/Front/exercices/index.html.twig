{% extends 'baseFront.html.twig' %}

{% block title %}Formulaire Exercices {% endblock %}

{% block body %}
<div class="container">
    <div class="hero overlay" style="background-image: url('images/bg_3.jpg');">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-9 mx-auto text-center">
                    <h1 class="text-white">Ajouter Exercices</h1>
                </div>
            </div>
        </div>
    </div>

    <br><br><br><br><br><br>
<h1 class="text-center mb-4">Minuteur</h1>
    <div class="timer text-center mb-4">
    <div>
        <label for="time">Entrez le temps en secondes :</label>
        <input type="number" id="time" min="1" step="1">
    </div>
    <div id="timer">00:00:00</div>
    <button id="start">Start</button>
    <button id="stop">Stop</button>
    <button id="reset">Reset</button>
    </div>


    <br><br><br><br><br><br>

    <h1 class="text-center mb-4">Formulaire Exercices</h1>

    <div class="row justify-content-center">
        <!-- Formulaire déplacé à droite -->
        <div class="col-md-6 order-md-2">
            <form method="post" novalidate enctype="multipart/form-data">
                {{ form_start(form) }}
                {{ form_widget(form) }}
                <button type="submit" class="btn btn-primary btn-block mb-3">AJOUTER</button>
                {{ form_end(form) }}
            </form>
        </div>
    </div>

    <br><br><br><br><br><br>

   
    <style>
       /* Style pour l'arrière-plan semi-transparent */
    .hero.overlay:before {
        /* content: ""; */
        position: absolute;
        background: rgb(10 98 30 / 50%);
        /* top: 0; */
        /* left: 0; */
        /* right: 0; */
        bottom: 0;
    }
.btn-primary {
        color: #fff;
        background-color: #0c4008;
        border-color: #1e8d18;
    }
    /* Style spécifique pour les contrôles de formulaire */
    .form-control {
        height: 43px;
        border-radius: 4px;
        background: none;
        border-width: 1px;
        color: #34c724 !important;
        border-color: rgb(26 199 82 / 20%);
        font-family: "Montserrat", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    }
    </style>

    <!-- Liste des Exercices -->
    <div class="row justify-content-center">
    {% for coord in Exercices %}
        <div class="col-md-3 mb-4">
            <div class="card bg-light w-100">
                <img src="{{ asset('uploads/images/' ~ coord.image) }}" alt="Image" class="card-img-top">
                <div class="card-body">
                    <h3 class="card-title">{{ coord.nom }}</h3>
                    <p>{{ coord.description }}</p>
                </div>
                <div class="card-footer text-center">
                    <div class="actions">
                        <a href="{{ path('editEXO', {'id': coord.id }) }}" class="btn btn-primary">Edit</a>
                        <a href="{{ path('delete_exercices', {'id': coord.id }) }}" class="btn btn-danger">Delete</a>
                    </div>
                </div>
            </div>
        </div>
        {% if loop.index % 4 == 0 %}</div><div class="row justify-content-center">{% endif %}
    {% endfor %}
</div>
</div>

<script>
    const timerDisplay = document.getElementById('timer');
    const startButton = document.getElementById('start');
    const stopButton = document.getElementById('stop');
    const timeInput = document.getElementById('time');

    let seconds = 0;
    let interval;

    function startTimer() {
        seconds = parseInt(timeInput.value);
        interval = setInterval(updateTimer, 1000);
    }
    function resetTimer() {
        stopTimer();
    seconds = 0;
    updateTimerDisplay();
}

const resetButton = document.getElementById('reset');
resetButton.addEventListener('click', resetTimer);

    function stopTimer() {
        clearInterval(interval);
    }
    function updateTimerDisplay() {
    const displayHours = Math.floor(seconds / 3600);
    const displayMinutes = Math.floor((seconds % 3600) / 60);
    const displaySeconds = seconds % 60;
    timerDisplay.innerText = `${displayHours < 10 ? '0' + displayHours : displayHours}:${displayMinutes < 10 ? '0' + displayMinutes : displayMinutes}:${displaySeconds < 10 ? '0' + displaySeconds : displaySeconds}`;
}

    function updateTimer() {
        seconds--;
        if (seconds < 0) {
            stopTimer();
            return;
        }
        const displayHours = Math.floor(seconds / 3600);
        const displayMinutes = Math.floor((seconds % 3600) / 60);
        const displaySeconds = seconds % 60;
        timerDisplay.innerText = `${displayHours < 10 ? '0' + displayHours : displayHours}:${displayMinutes < 10 ? '0' + displayMinutes : displayMinutes}:${displaySeconds < 10 ? '0' + displaySeconds : displaySeconds}`;
    }

    startButton.addEventListener('click', startTimer);
    stopButton.addEventListener('click', stopTimer);
</script>

<style>
    .timer {
        margin-bottom: 20px;
        font-size: 18px; /* Taille de police diminuée */
        color: #fff; /* Couleur du texte blanc */
    }

    #time {
        margin-bottom: 10px;
    }

    #timer {
        font-weight: bold;
        margin-bottom: 10px;
        color: #fff; /* Couleur du texte blanc */
    }

    #start,
    #stop,
    #reset {
        padding: 6px 16px; /* Taille des boutons ajustée */
        margin-right: 10px;
        border: none;
        border-radius: 4px;
        background-color: #28a745; /* Couleur verte */
        color: #fff; /* Couleur du texte blanc */
        cursor: pointer;
    }

    #start:hover,
    #stop:hover,
    #reset:hover {
        background-color: #218838; /* Couleur verte plus foncée au survol */
    }
</style>

{% endblock %}
